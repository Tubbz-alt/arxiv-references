import sys
sys.path.append('.')

import json
import jsonschema
import subprocess
import unittest
from unittest import mock

from reflink.services import data_store
from reflink.process.extract import cermine

def ordered(obj):
    """ A function for comparing json objects """
    if isinstance(obj, dict):
        return sorted((k, ordered(v)) for k, v in obj.items())
    elif isinstance(obj, list):
        return sorted(ordered(x) for x in obj)
    else:
        return obj

class TestCERMINEExtractor(unittest.TestCase):
    def test_cxml_to_json_formatter(self):
        # NOTE -- file generated by: json.dump(d, open('1702.07336.cermine.json', 'w'), indent=4, sort_keys=True)
        cxml_document_path = 'tests/data/1702.07336.cermxml'
        json_document_path = 'tests/data/1702.07336.cermine.json'

        doc_test = cermine.convert_cxml_json(cxml_document_path)
        doc_orig = json.load(open(json_document_path))

        valid_keys = ['document', 'references']
        doc_test = {k: v for k, v in doc_test.items() if k in valid_keys}
        doc_orig = {k: v for k, v in doc_orig.items() if k in valid_keys}
        self.assertEqual(ordered(doc_test), ordered(doc_orig))

    def test_cxml_json_schema(self):
        cxml_document_path = 'tests/data/1702.07336.cermxml'
        jsondoc = cermine.convert_cxml_json(cxml_document_path)

        schema_path = 'schema/references.json'
        schemadoc = json.load(open(schema_path))
        jsonschema.validate(jsondoc, schemadoc)

    def test_pdf_not_found(self):
        pdf_document_path = 'tests/data/1702.07335.pdf'
        with self.assertRaises(FileNotFoundError):
            cermine.extract_references(pdf_document_path)


if __name__ == '__main__':
    unittest.main()
